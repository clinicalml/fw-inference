
Weighted Constraint Satisfaction Problem file format (wcsp)

It is a text format composed of a list of numerical and string terms
separated by spaces. Instead of using names for making reference to
variables, variable indexes are employed. The same for domain values.
All indexes start at zero.

Cost functions can be defined in intention (see below) or in extension,
by their list of tuples. A default cost value is defined per function in
order to reduce the size of the list. Only tuples with a different cost
value should be given (not mandatory). All the cost values must be
positive. The arity of a cost function in extension may be equal to
zero. In this case, there is no tuples and the default cost value is
added to the cost of any solution. This can be used to represent a
global lower bound constant of the problem.

The wcsp file format is composed of three parts: a problem header, the
list of variable domain sizes, and the list of cost functions.

  * Header definition for a given problem:

    <Problem name>
    <Number of variables (N)>
    <Maximum domain size>
    <Number of cost functions>
    <Initial global upper bound of the problem (UB)>

    The goal is to find an assignment of all the variables with minimum
    total cost, strictly lower than UB. Tuples with a cost greater than
    or equal to UB are forbidden (hard constraint).
  * Definition of domain sizes

    <Domain size of variable with index 0>
    ...
    <Domain size of variable with index N - 1>

    Note
        domain values range from zero to /size-1/ 
        a negative domain size is interpreted as a variable with an
        interval domain in $[0,-size-1]$ 

    Warning
        variables with interval domains are restricted to arithmetic and
        disjunctive cost functions in intention (see below)

  * General definition of cost functions
      o Definition of a cost function in extension

        <Arity of the cost function>
        <Index of the first variable in the scope of the cost function>
        ...
        <Index of the last variable in the scope of the cost function>
        <Default cost value>
        <Number of tuples with a cost different than the default cost>

        followed by for every tuple with a cost different than the
        default cost:

        <Index of the value assigned to the first variable in the scope>
        ...
        <Index of the value assigned to the last variable in the scope>
        <Cost of the tuple>

        Note
            Shared cost function: A cost function in extension can be
            shared by several cost functions with the same arity (and
            same domain sizes) but different scopes. In order to do
            that, the cost function to be shared must start by a
            negative scope size. Each shared cost function implicitly
            receives an occurrence number starting from 1 and
            incremented at each new shared definition. New cost
            functions in extension can reuse some previously defined
            shared cost functions in extension by using a negative
            number of tuples representing the occurrence number of the
            desired shared cost function. Note that default costs should
            be the same in the shared and new cost functions. Here is an
            example of 4 variables with domain size 4 and one
            AllDifferent hard constraint decomposed into 6 binary
            constraints.

      o Shared CF used inside a small example in wcsp format:
        AllDifferentDecomposedIntoBinaryConstraints 4 4 6 1
        4 4 4 4
        -2 0 1 0 4
        0 0 1
        1 1 1
        2 2 1
        3 3 1
        2 0 2 0 -1
        2 0 3 0 -1
        2 1 2 0 -1
        2 1 3 0 -1
        2 2 3 0 -1
      o Definition of a cost function in intension by replacing the
        default cost value by -1 and by giving its keyword name and its
        K parameters

        <Arity of the cost function>
        <Index of the first variable in the scope of the cost function>
        ...
        <Index of the last variable in the scope of the cost function>
        -1
        <keyword>
        <parameter1>
        ...
        <parameterK>

Possible keywords followed by their specific parameters:

  * >= /cst/ /delta/ to express soft binary constraint $x \geq y + cst$
    with associated cost function $max( (y + cst - x \leq delta)?(y +
    cst - x):UB , 0 )$
  * > /cst/ /delta/ to express soft binary constraint $x > y + cst$ with
    associated cost function $max( (y + cst + 1 - x \leq delta)?(y + cst
    + 1 - x):UB , 0 )$
  * <= /cst/ /delta/ to express soft binary constraint $x \leq y + cst$
    with associated cost function $max( (x - cst - y \leq delta)?(x -
    cst - y):UB , 0 )$
  * < /cst/ /delta/ to express soft binary constraint $x < y + cst$ with
    associated cost function $max( (x - cst + 1 - y \leq delta)?(x - cst
    + 1 - y):UB , 0 )$
  * = /cst/ /delta/ to express soft binary constraint $x = y + cst$ with
    associated cost function $(|y + cst - x| \leq delta)?|y + cst - x|:UB$
  * disj /cstx/ /csty/ /penalty/ to express soft binary disjunctive
    constraint $x \geq y + csty \vee y \geq x + cstx$ with associated
    cost function $(x \geq y + csty \vee y \geq x + cstx)?0:penalty$
  * sdisj /cstx/ /csty/ /xinfty/ /yinfty/ /costx/ /costy/ to express a
    special disjunctive constraint with three implicit hard constraints
    $x \leq xinfty$ and $y \leq yinfty$ and $x < xinfty \wedge y <
    yinfty \Rightarrow (x \geq y + csty \vee y \geq x + cstx)$ and an
    additional cost function $((x = xinfty)?costx:0) + ((y=
    yinfty)?costy:0)$
  * salldiff var|dec /cost/ to express a soft alldifferent constraint
    with either variable-based (/var/ keyword) or decomposition-based
    (/dec/ keyword) cost semantic with a given /cost/ per violation
  * sgcc var|dec /cost/ /nb_values/ (/value/ /lower_bound/
    /upper_bound/)* to express a soft global cardinality constraint with
    either variable-based (/var/ keyword) or decomposition-based (/dec/
    keyword) cost semantic with a given /cost/ per violation and for
    each value its lower and upper bound
  * ssame /cost/ /list_size1/ /list_size2/ (/variable_index/)*
    (/variable_index/)* to express a permutation constraint on two lists
    of variables of equal size (implicit variable-based cost semantic)
  * sregular var|edit /cost/ /nb_states/ /nb_initial_states/ (/state/)*
    /nb_final_states/ (/state/)* /nb_transitions/ (/start_state/
    /symbol_value/ /end_state/)* to express a soft regular constraint
    with either variable-based (/var/ keyword) or edit distance-based
    (/edit/ keyword) cost semantic with a given /cost/ per violation
    followed by the definition of a deterministic finite automaton with
    number of states, list of initial and final states, and list of
    state transitions where symbols are domain values
  * wamong global constraint restrains the number of variables of its
    scope to take a bounded number of times a value from a given set.
    The global cost function associated to Among is WeightedAmong
    <classWeightedAmong.html>. This global cost function can be
    decomposed into a set of ternary constraints with an additionnal set
    of variables. This decomposition uses the new variables as counters
    and does a cumulative sum all along the set of ternary cost functions.
  * wvaramong hard global constraint restrains the number of variables
    of its scope, except the last variable, to take a value from a given
    set to be equal to the last variable.
  * woverlap The Overlap global constraint limits the overlaps between
    two sequence of variables X, Y (i.e. set the fact that Xi and Yi
    take the same value (not equal to zero)). The global cost function
    associated to Overlap is WeightedOverlap
    <classWeightedOverlap.html>. This global cost function can be
    decomposed into a set of ternary constraints with an additionnal set
    of variables. This decomposition uses two sets of new variables :
    the first as an overlap flag and a second one as a cumulative sum.
    Finally, an unary cost function ensures that the overlap respects a
    given value.
  * wsum The Sum global constraint tests if the sum of a set of
    variables match with a comparator and a right-handside value (for
    example == 4). The global cost function associated to Sum is
    WeightedSum <classWeightedSum.html>. This global cost function can
    be decomposed into a set of ternary constraints with an additionnal
    set of variables. This decomposition uses the new variables as
    counter and does a cumulative sum all along the set of ternary cost
    functions. Finally, an unary cost function ensures the comparator.
  * wvarsum The Sum global constraint tests if the sum of a set of
    variables match with a comparator and a given variable. The global
    cost function associated to Sum is WeightedSum
    <classWeightedSum.html>. This global cost function can be decomposed
    into a set of ternary constraints with an additionnal set of
    variables. This decomposition uses the new variables as counter and
    does a cumulative sum all along the set of ternary cost functions.
    Finally, a binary cost function compares the last counter variable
    with the last variable in the scope.

    Note
        This decomposition can use an exponential size (domains of
        counter variables). Let us note <> the comparator, K the value
        associated to the comparator, and Sum the result of the sum over
        the variables. For each comparator, the gap is defined according
        to the distance as follows:
          o if <> is == : gap = abs(K - Sum); if <> is <= : gap =
            max(0,Sum - K); if <> is < : gap = max(0,Sum - K - 1);
          o if <> is != : gap = 1 if Sum != K and gap = 0 otherwise; if
            <> is > : gap = max(0,K - Sum + 1);
          o if <> is >= : gap = max(0,K - Sum);

  * wregular /nb_states/ /nb_initial_states/ (/state/ and cost enum)*
    /nb_final_states/ (/state/ and cost enum)* /nb_transitions/
    (/start_state/ /symbol_value/ /end_state/ /cost/)* to express a
    wregular constraint with variable-based cost semantic with a given
    /cost/ per violation followed by the definition of a deterministic
    finite automaton with number of states, list of initial and final
    states, and list of state transitions where symbols are domain values

Warning
    /list_size1/ and /list_size2/ must be equal in /ssame/. 
    Cost functions defined in intention cannot be shared.

Note
    More about decomposable global cost functions can be found here
    https://metivier.users.greyc.fr/decomposable/

Examples:

  * quadratic cost function $x0 * x1$ in extension with variable domains
    $\{0,1\}$ (equivalent to a soft clause $\neg x0 \vee \neg x1$):
    2 0 1 0 1 1 1 1
  * simple arithmetic hard constraint $x1 < x2$:
    2 1 2 -1 < 0 0
  * hard temporal disjunction $x1 \geq x2 + 2 \vee x2 \geq x1 + 1$:
    2 1 2 -1 disj 1 2 UB
  * soft_alldifferent({x0,x1,x2,x3}):
    4 0 1 2 3 -1 salldiff var 1
  * soft_gcc({x1,x2,x3,x4}) with each value /v/ from 1 to 4 only
    appearing at least v-1 and at most v+1 times:
    4 1 2 3 4 -1 sgcc var 1 4 1 0 2 2 1 3 3 2 4 4 3 5
  * soft_same({x0,x1,x2,x3},{x4,x5,x6,x7}):
    8 0 1 2 3 4 5 6 7 -1 ssame 1 4 4 0 1 2 3 4 5 6 7
  * soft_regular({x1,x2,x3,x4}) with DFA <structDFA.html> (3*)+(4*):
    4 1 2 3 4 -1 sregular var 1 2 1 0 2 0 1 3 0 3 0 0 4 1 1 4 1
  * wsum ({x1,x2,x3,x4}) with hard cost (1000) if $\sum_{i=1}^4(x_i)
    \neq 4$:
    4 0 1 2 3 -1 wsum hard 1000 == 4
  * wvarsum ({x1,x2,x3,x4}) with hard cost (1000) if $\sum_{i=1}^3(x_i)
    \neq x_4$:
    4 0 1 2 3 -1 wvarsum hard 1000 ==
  * wamong ({x1,x2,x3,x4}) with hard cost (1000) if $\sum_{i=1}^4(x_i
    \in \{1,2\}) < 1$ or $\sum_{i=1}^4(x_i \in \{1,2\}) > 3$:
    4 0 1 2 3 -1 wamong hard 1000 2 1 2 1 3
  * wvaramong ({x1,x2,x3,x4}) with hard cost (1000) if $\sum_{i=1}^3(x_i
    \in \{1,2\}) \neq x_4$:
    4 0 1 2 3 -1 wvaramong hard 1000 2 1 2
  * wregular({x0,x1,x2,x3}) with DFA <structDFA.html> (a(ba)*c*):
    4 0 1 2 3 -1 wregular 3 1 0 0 1 2 0 9 0 0 1 0 0 1 1 1 0 2 1 1 1 1 0
    0 1 0 0 1 1 2 0 1 1 2 2 0 1 0 2 1 1 1 2 1
  * woverlap({x1,x2,x3,x4}) with hard cost (1000) if $\sum_{i=1}^2(x_i =
    x_{i+2}) \geq 1$:
    4 0 1 2 3 -1 woverlap hard 1000 < 1

Latin Square 4 x 4 crisp CSP example in wcsp format:

latin4 16 4 8 1
4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
4 0 1 2 3 -1 salldiff var 1
4 4 5 6 7 -1 salldiff var 1
4 8 9 10 11 -1 salldiff var 1
4 12 13 14 15 -1 salldiff var 1
4 0 4 8 12 -1 salldiff var 1
4 1 5 9 13 -1 salldiff var 1
4 2 6 10 14 -1 salldiff var 1
4 3 7 11 15 -1 salldiff var 1

4-queens binary weighted CSP example with random unary costs in wcsp
format:

4-WQUEENS 4 4 10 5
4 4 4 4
2 0 1 0 10
0 0 5
0 1 5
1 0 5
1 1 5
1 2 5
2 1 5
2 2 5
2 3 5
3 2 5
3 3 5
2 0 2 0 8
0 0 5
0 2 5
1 1 5
1 3 5
2 0 5
2 2 5
3 1 5
3 3 5
2 0 3 0 6
0 0 5
0 3 5
1 1 5
2 2 5
3 0 5
3 3 5
2 1 2 0 10
0 0 5
0 1 5
1 0 5
1 1 5
1 2 5
2 1 5
2 2 5
2 3 5
3 2 5
3 3 5
2 1 3 0 8
0 0 5
0 2 5
1 1 5
1 3 5
2 0 5
2 2 5
3 1 5
3 3 5
2 2 3 0 10
0 0 5
0 1 5
1 0 5
1 1 5
1 2 5
2 1 5
2 2 5
2 3 5
3 2 5
3 3 5
1 0 0 2
1 1
3 1
1 1 0 2
1 1
2 1
1 2 0 2
1 1
2 1
1 3 0 2
0 1
2 1
